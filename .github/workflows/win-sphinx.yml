name: sphinx-build-on-windows
on: 
# push, pullrequest時にci実行
    push:
        paths-ignore:
          - '.gitignore'
          - 'LICENSE'
          - '**.md'
    pull_request:
        paths-ignore:
          - '.gitignore'
          - 'LICENSE'
          - '**.md'
jobs:
  deploy:
    name: sphinx-on-windows
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.11] # [3.5, 3.6, 3.7, 3.8]
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'
    - name: Install poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry poetry-dynamic-versioning

    - name: Check bat file
      run: |
        tesst-path .\update_apidoc.bat
    
    
    - name: Poetry settings and Install dependencies
      run: |
        poetry config virtualenvs.create false
        poetry self add "poetry-dynamic-versioning[plugin]"
        poetry dynamic-versioning enable
        poetry install --with dev

    - name: Build and make html to docs/_build
      run: |
        # Get-Location
        # Get-Childitem .
        .\update_apidoc.bat

    

  
  
  # build:
  #   name: MSBuild
  #   runs-on: windows-latest

  #   strategy:
  #     matrix:
  #       python-version: [3.9] # [3.5, 3.6, 3.7, 3.8]

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install dependencies
  #       shell: powershell
  #       run: |
  #         git --version
  #         python --version
  #         python -m pip install --upgrade pip
  #         pip install pyqt5
  #         pip install numpy

  #     - name: tetris
  #       shell: powershell
  #       run: |
  #         Remove-Item -Recurse -Force tetris
  #         git clone https://github.com/seigot/tetris
  #         cd tetris
  #         pip install -r requirements.txt
  #         $Env:QT_QPA_PLATFORM = 'offscreen'
  #         python start.py -m sample -t 3 -f $HOME/result.json
