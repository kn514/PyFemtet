name: sphinx-build-on-windows

# on:
#   push:
#     branches: ["main"]
on:
  release:
    types: [published]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write


# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false


jobs:
  build:
    runs-on: windows-latest
    steps:
    
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'
    
    - name: Install poetry
      run: |
        python -m pip install --upgrade pip
        pip install poetry poetry-dynamic-versioning

    - name: Poetry settings and Install dependencies
      run: |
        poetry config virtualenvs.create false
        poetry self add "poetry-dynamic-versioning[plugin]"
        poetry dynamic-versioning enable
        poetry install --with dev

    - name: Build and make html to docs/_build
      run: |
        .\.docs\update_apidoc.bat

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        # Upload entire repository
        path: '.\docs'


  deploy:

    environment:
      name: github-pages
      url: ${{steps.deployment.outputs.page_url}}

    runs-on: windows-latest
    needs: build

    steps:
      - name: Deploy artifact
        id: deployment
        uses: actions/deploy-pages@v1
    

  
  
  # build:
  #   name: MSBuild
  #   runs-on: windows-latest

  #   strategy:
  #     matrix:
  #       python-version: [3.9] # [3.5, 3.6, 3.7, 3.8]

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Set up Python ${{ matrix.python-version }}
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-version }}

  #     - name: Install dependencies
  #       shell: powershell
  #       run: |
  #         git --version
  #         python --version
  #         python -m pip install --upgrade pip
  #         pip install pyqt5
  #         pip install numpy

  #     - name: tetris
  #       shell: powershell
  #       run: |
  #         Remove-Item -Recurse -Force tetris
  #         git clone https://github.com/seigot/tetris
  #         cd tetris
  #         pip install -r requirements.txt
  #         $Env:QT_QPA_PLATFORM = 'offscreen'
  #         python start.py -m sample -t 3 -f $HOME/result.json
